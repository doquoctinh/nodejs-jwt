openapi: '3.0.0'
info:
  title: 'Book Management'
  version: '1.0.0'
  description: >-
    for testing the rest of the API(S). 
schemes:
- https
paths:
  /books:
    get:
      summary: Returns the list of all the books
      tags: [Books]
      #security:
      #  - bearerAuth: []
      responses:
        200:
          description: The list of the books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Create a new book
      tags: [Books]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The book was successfully created
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Book'
  /books/{id}:
    get:
      summary: Get the book by id
      tags: [Books]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: the book id
      responses:
        200:
          description: The book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    put:
      summary: Update the book by id
      tags: [Books]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: the book id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      summary: Remove the book by id
      tags: [Books]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: the book id
      responses:
        200:
          description: The book was removed
        404:
          description: The book was not found
  
  /auth/login:
    post:
      summary: login
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Login successfully
        500:
          description: Some server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Book:
      type: object
      required:
        - title
        - author
      properties:
        id:
          type: string
          description: The auto-generated id of the book
        title:
          type: string
          description: The book title
        author:
          type: string
          description: The book author
    User:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: The use
        password:
          type: string
          description: Password
      example:
        username: tdo43
        password: password
security:
  - bearerAuth: []